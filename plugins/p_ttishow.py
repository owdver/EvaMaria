from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from pyrogram.errors.exceptions.bad_request_400 import MessageTooLong, PeerIdInvalid
from info import ADMINS, LOG_CHANNEL
from database.users_chats_db import db
from database.ia_filterdb import Media
from utils import get_size, temp
from Script import script
from pyrogram.errors import ChatAdminRequired

"""-----------------------------------------https://t.me/GetTGLink/4179 --------------------------------------"""

@Client.on_message(filters.new_chat_members & filters.group)
async def save_group(bot, message):
    r_j_check = [u.id for u in message.new_chat_members]
    if temp.ME in r_j_check:
        if not await db.get_chat(message.chat.id):
            total=await bot.get_chat_members_count(message.chat.id)
            r_j = message.from_user.mention if message.from_user else "Anonymous" 
            await bot.send_message(LOG_CHANNEL, script.LOG_TEXT_G.format(message.chat.title, message.chat.id, total, r_j))       
            await db.add_chat(message.chat.id, message.chat.title)
        if message.chat.id in temp.BANNED_CHATS:
            # Inspired from a boat of a banana tree
            buttons = [[
                InlineKeyboardButton('S·¥ú·¥ò·¥ò·¥è Ä·¥õ', url=f'https://t.me/OwDvEr_BoT')
            ]]
            reply_markup=InlineKeyboardMarkup(buttons)
            k = await message.reply(
                text='<b>C ú·¥Ä·¥õ N·¥è·¥õ A ü ü·¥è·¥°·¥á·¥Ö üêû\n\nM è A·¥Ö·¥ç…™…¥s H·¥Äs R·¥ás·¥õ Ä…™·¥Ñ·¥õ·¥á·¥Ö M·¥á F Ä·¥è·¥ç W·¥è Ä·¥ã…™…¥…¢ H·¥á Ä·¥á ! I“ì Y·¥è·¥ú W·¥Ä…¥·¥õ T·¥è K…¥·¥è·¥° M·¥è Ä·¥á A ô·¥è·¥ú·¥õ I·¥õ C·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ S·¥ú·¥ò·¥ò·¥è Ä·¥õ..</b>',
                reply_markup=reply_markup,
            )

            try:
                await k.pin()
            except:
                pass
            await bot.leave_chat(message.chat.id)
            return
        buttons = [[
            InlineKeyboardButton('‚ÑπÔ∏è H·¥á ü·¥ò', url=f"https://t.me/{temp.U_NAME}?start=help"),
            InlineKeyboardButton('üì¢ U·¥ò·¥Ö·¥Ä·¥õ·¥ás', url='https://t.me/OB_LINKS')
        ]]
        reply_markup=InlineKeyboardMarkup(buttons)
        await message.reply_text(
            text=f"<b>T ú·¥Ä…¥·¥ã è·¥è·¥ú F·¥è Ä A·¥Ö·¥Ö…™…¥…¢ M·¥á I…¥ {message.chat.title} ‚ù£Ô∏è\n\nI“ì Y·¥è·¥ú H·¥Ä·¥†·¥á A…¥ è Q·¥ú·¥ás·¥õ…™·¥è…¥s & D·¥è·¥ú ô·¥õs A ô·¥è·¥ú·¥õ Us…™…¥…¢ M·¥á C·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ S·¥ú·¥ò·¥ò·¥è Ä·¥õ.</b>",
            reply_markup=reply_markup)
    else:
        for u in message.new_chat_members:
            if (temp.MELCOW).get('welcome') is not None:
                try:
                    await (temp.MELCOW['welcome']).delete()
                except:
                    pass
            temp.MELCOW['welcome'] = await message.reply(f"<b>H·¥á è , {u.mention}, W·¥á ü·¥Ñ·¥è·¥ç·¥á T·¥è {message.chat.title}</b>")


@Client.on_message(filters.command('leave') & filters.user(ADMINS))
async def leave_a_chat(bot, message):
    if len(message.command) == 1:
        return await message.reply('G…™·¥†·¥á M·¥á A C ú·¥Ä·¥õ …™·¥Ö')
    chat = message.command[1]
    try:
        chat = int(chat)
    except:
        chat = chat
    try:
        buttons = [[
            InlineKeyboardButton('S·¥ú·¥ò·¥ò·¥è Ä·¥õ', url=f'https://t.me/OwDvEr_BoT')
        ]]
        reply_markup=InlineKeyboardMarkup(buttons)
        await bot.send_message(
            chat_id=chat,
            text='<b>H·¥á ü ü·¥è F Ä…™·¥á…¥·¥Ös, \nM è A·¥Ö·¥ç…™…¥ H·¥Äs T·¥è ü·¥Ö M·¥á T·¥è L·¥á·¥Ä·¥†·¥á F Ä·¥è·¥ç G Ä·¥è·¥ú·¥ò S·¥è I G·¥è! I“ì Y·¥è·¥ú W·¥Ä…¥…¥·¥Ä A·¥Ö·¥Ö M·¥á A…¢·¥Ä…™…¥ C·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ M è S·¥ú·¥ò·¥ò·¥è Ä·¥õ G Ä·¥è·¥ú·¥ò.</b>',
            reply_markup=reply_markup,
        )

        await bot.leave_chat(chat)
    except Exception as e:
        await message.reply(f'Error - {e}')

@Client.on_message(filters.command('disable') & filters.user(ADMINS))
async def disable_chat(bot, message):
    if len(message.command) == 1:
        return await message.reply('Give me a chat id')
    r = message.text.split(None)
    if len(r) > 2:
        reason = message.text.split(None, 2)[2]
        chat = message.text.split(None, 2)[1]
    else:
        chat = message.command[1]
        reason = "N·¥è R·¥á·¥Äs·¥è…¥ P Ä·¥è·¥†…™·¥Ö·¥á·¥Ö"
    try:
        chat_ = int(chat)
    except:
        return await message.reply('G…™·¥†·¥á M·¥á A C ú·¥Ä·¥õ …™·¥Ö')
    cha_t = await db.get_chat(int(chat_))
    if not cha_t:
        return await message.reply("C ú·¥Ä·¥õ N·¥è·¥õ F·¥è·¥ú…¥·¥Ö I…¥ D ô")
    if cha_t['is_disabled']:
        return await message.reply(f"T ú…™s C ú·¥Ä·¥õ Is A ü Ä·¥á·¥Ä·¥Ö è D…™s·¥Ä ô ü·¥á·¥Ö:\nR·¥á·¥Äs·¥è…¥-<code> {cha_t['reason']} </code>")
    await db.disable_chat(int(chat_), reason)
    temp.BANNED_CHATS.append(int(chat_))
    await message.reply('C ú·¥Ä·¥õ S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è D…™s·¥Ä ô ü·¥á·¥Ö')
    try:
        buttons = [[
            InlineKeyboardButton('S·¥ú·¥ò·¥ò·¥è Ä·¥õ', url=f'https://t.me/OwDvEr_BoT')
        ]]
        reply_markup=InlineKeyboardMarkup(buttons)
        await bot.send_message(
            chat_id=chat_, 
            text=f'<b>H·¥á ü ü·¥è F Ä…™·¥á…¥·¥Ös, \nM è A·¥Ö·¥ç…™…¥ H·¥Äs T·¥è ü·¥Ö M·¥á T·¥è L·¥á·¥Ä·¥†·¥á F Ä·¥è·¥ç G Ä·¥è·¥ú·¥ò S·¥è I G·¥è! I“ì Y·¥è·¥ú W·¥Ä…¥…¥·¥Ä A·¥Ö·¥Ö M·¥á A…¢·¥Ä…™…¥ C·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ M è S·¥ú·¥ò·¥ò·¥è Ä·¥õ G Ä·¥è·¥ú·¥ò.</b> \nR·¥á·¥Äs·¥è…¥ : <code>{reason}</code>',
            reply_markup=reply_markup)
        await bot.leave_chat(chat_)
    except Exception as e:
        await message.reply(f"E Ä Ä·¥è Ä - {e}")


@Client.on_message(filters.command('enable') & filters.user(ADMINS))
async def re_enable_chat(bot, message):
    if len(message.command) == 1:
        return await message.reply('G…™·¥†·¥á M·¥á A C ú·¥Ä·¥õ …™·¥Ö')
    chat = message.command[1]
    try:
        chat_ = int(chat)
    except:
        return await message.reply('G…™·¥†·¥á M·¥á A V·¥Ä ü…™·¥Ö C ú·¥Ä·¥õ …™·¥Ö')
    sts = await db.get_chat(int(chat))
    if not sts:
        return await message.reply("C ú·¥Ä·¥õ N·¥è·¥õ F·¥è·¥ú…¥·¥Ö I…¥ D ô !")
    print(sts)
    if not sts.get('is_disabled'):
        return await message.reply('T ú…™s C ú·¥Ä·¥õ Is N·¥è·¥õ D…™s·¥Ä ô ü·¥á·¥Ö Y·¥á·¥õ.')
    await db.re_enable_chat(int(chat_))
    temp.BANNED_CHATS.remove(int(chat_))
    await message.reply("C ú·¥Ä·¥õ S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è R·¥á-E…¥·¥Ä ô ü·¥á·¥Ö")


@Client.on_message(filters.command('stats') & filters.incoming)
async def get_ststs(bot, message):
    rju = await message.reply('F·¥á·¥õ·¥Ñ ú…™…¥…¢ S·¥õ·¥Ä·¥õs..')
    total_users = await db.total_users_count()
    totl_chats = await db.total_chat_count()
    files = await Media.count_documents()
    size = await db.get_db_size()
    free = 536870912 - size
    size = get_size(size)
    free = get_size(free)
    await rju.edit(script.STATUS_TXT.format(files, total_users, totl_chats, size, free))


# a function for trespassing into others groups, Inspired by a Vazha
# Not to be used , But Just to showcase his vazhatharam.
# @Client.on_message(filters.command('invite') & filters.user(ADMINS))
async def gen_invite(bot, message):
    if len(message.command) == 1:
        return await message.reply('G…™·¥†·¥á M·¥á A C ú·¥Ä·¥õ …™·¥Ö')
    chat = message.command[1]
    try:
        chat = int(chat)
    except:
        return await message.reply('G…™·¥†·¥á M·¥á A V·¥Ä ü…™·¥Ö C ú·¥Ä·¥õ …™·¥Ö')
    try:
        link = await bot.create_chat_invite_link(chat)
    except ChatAdminRequired:
        return await message.reply("I…¥·¥†…™·¥õ·¥á L…™…¥·¥ã G·¥á…¥·¥á Ä·¥Ä·¥õ…™·¥è…¥ F·¥Ä…™ ü·¥á·¥Ö, I·¥Ä·¥ç N·¥è·¥õ H·¥Ä·¥†…™…¥…¢ S·¥ú“ì“ì…™·¥Ñ…™·¥á…¥·¥õ R…™…¢ ú·¥õs")
    except Exception as e:
        return await message.reply(f'Error {e}')
    await message.reply(f'H·¥á Ä·¥á Is Y·¥è·¥ú Ä I…¥·¥†…™·¥õ·¥á L…™…¥·¥ã {link.invite_link}')

@Client.on_message(filters.command('ban') & filters.user(ADMINS))
async def ban_a_user(bot, message):
    # https://t.me/GetTGLink/4185
    if len(message.command) == 1:
        return await message.reply('G…™·¥†·¥á M·¥á A Us·¥á Ä …™·¥Ö / Us·¥á Ä…¥·¥Ä·¥ç·¥á')
    r = message.text.split(None)
    if len(r) > 2:
        reason = message.text.split(None, 2)[2]
        chat = message.text.split(None, 2)[1]
    else:
        chat = message.command[1]
        reason = "N·¥è R·¥á·¥Äs·¥è…¥ P Ä·¥è·¥†…™·¥Ö·¥á·¥Ö"
    try:
        chat = int(chat)
    except:
        pass
    try:
        k = await bot.get_users(chat)
    except PeerIdInvalid:
        return await message.reply("T ú…™s Is A…¥ I…¥·¥†·¥Ä ü…™·¥Ö Us·¥á Ä, M·¥Ä·¥ã·¥á S·¥ú Ä·¥á I M·¥á·¥õ H…™·¥ç B·¥á“ì·¥è Ä·¥á.")
    except IndexError:
        return await message.reply("T ú…™s M…™…¢ ú·¥õ B·¥á A C ú·¥Ä…¥…¥·¥á ü, M·¥Ä·¥ã·¥á S·¥ú Ä·¥á I·¥õs A Us·¥á Ä.")
    except Exception as e:
        return await message.reply(f'E Ä Ä·¥è Ä - {e}')
    else:
        jar = await db.get_ban_status(k.id)
        if jar['is_banned']:
            return await message.reply(f"{k.mention} Is A ü Ä·¥á·¥Ä·¥Ö è B·¥Ä…¥…¥·¥á·¥Ö\nR·¥á·¥Äs·¥è…¥: {jar['ban_reason']}")
        await db.ban_user(k.id, reason)
        temp.BANNED_USERS.append(k.id)
        await message.reply(f"S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è B·¥Ä…¥…¥·¥á·¥Ö {k.mention}")


    
@Client.on_message(filters.command('unban') & filters.user(ADMINS))
async def unban_a_user(bot, message):
    if len(message.command) == 1:
        return await message.reply('G…™·¥†·¥á M·¥á A Us·¥á Ä …™·¥Ö / Us·¥á Ä…¥·¥Ä·¥ç·¥á')
    r = message.text.split(None)
    if len(r) > 2:
        reason = message.text.split(None, 2)[2]
        chat = message.text.split(None, 2)[1]
    else:
        chat = message.command[1]
        reason = "N·¥è R·¥á·¥Äs·¥è…¥ P Ä·¥è·¥†…™·¥Ö·¥á·¥Ö"
    try:
        chat = int(chat)
    except:
        pass
    try:
        k = await bot.get_users(chat)
    except PeerIdInvalid:
        return await message.reply("T ú…™s Is A…¥ I…¥·¥†·¥Ä ü…™·¥Ö Us·¥á Ä, M·¥Ä·¥ã·¥á S·¥ú Ä·¥á I M·¥á·¥õ H…™·¥ç B·¥á“ì·¥è Ä·¥á.")
    except IndexError:
        return await message.reply("T ú…™s M…™…¢ ú·¥õ B·¥á A C ú·¥Ä…¥…¥·¥á ü, M·¥Ä·¥ã·¥á S·¥ú Ä·¥á I·¥õs A Us·¥á Ä.")
    except Exception as e:
        return await message.reply(f'E Ä Ä·¥è Ä - {e}')
    else:
        jar = await db.get_ban_status(k.id)
        if not jar['is_banned']:
            return await message.reply(f"{k.mention} Is N·¥è·¥õ Y·¥á·¥õ B·¥Ä…¥…¥·¥á·¥Ö.")
        await db.remove_ban(k.id)
        temp.BANNED_USERS.remove(k.id)
        await message.reply(f"S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è U…¥ ô·¥Ä…¥…¥·¥á·¥Ö {k.mention}")


    
@Client.on_message(filters.command('users') & filters.user(ADMINS))
async def list_users(bot, message):
    # https://t.me/GetTGLink/4184
    raju = await message.reply('G·¥á·¥õ·¥õ…™…¥…¢ L…™s·¥õ O“ì Us·¥á Äs')
    users = await db.get_all_users()
    out = "Us·¥á Äs S·¥Ä·¥†·¥á·¥Ö I…¥ D ô A Ä·¥á:\n\n"
    async for user in users:
        out += f"<a href=tg://user?id={user['id']}>{user['name']}</a>\n"
    try:
        await raju.edit_text(out)
    except MessageTooLong:
        with open('users.txt', 'w+') as outfile:
            outfile.write(out)
        await message.reply_document('users.txt', caption="L…™s·¥õ O“ì Us·¥á Äs")

@Client.on_message(filters.command('chats') & filters.user(ADMINS))
async def list_chats(bot, message):
    raju = await message.reply('G·¥á·¥õ·¥õ…™…¥…¢ L…™s·¥õ O“ì C ú·¥Ä·¥õs')
    chats = await db.get_all_chats()
    out = "C ú·¥Ä·¥õs S·¥Ä·¥†·¥á·¥Ö I…¥ D ô A Ä·¥á:\n\n"
    async for chat in chats:
        out += f"**T…™·¥õ ü·¥á:** `{chat['title']}`\n**- …™·¥Ö:** `{chat['id']}`\n"
    try:
        await raju.edit_text(out)
    except MessageTooLong:
        with open('chats.txt', 'w+') as outfile:
            outfile.write(out)
        await message.reply_document('chats.txt', caption="L…™s·¥õ O“ì C ú·¥Ä·¥õs")
